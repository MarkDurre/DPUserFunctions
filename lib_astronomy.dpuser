/* Gravitational constant */
function G {
  G = 6.673e-11
}

/* Mass of the sun in kg */
function Msun {
  Msun = 1.989e30
}

/* 1 Parsec in meters */

function Pc {
  Pc = 3.086e16
}

function airtovac,wave {                  
/*;+
; NAME:
;       AIRTOVAC
; PURPOSE:
;       Convert air wavelengths to vacuum wavelengths 
; EXPLANATION:
;       Wavelengths are corrected for the index of refraction of air under 
;       standard conditions.  Wavelength values below 2000 A will not be 
;       altered.  Uses the IAU standard for conversion given in Morton 
;       (1991 Ap.J. Suppl. 77, 119)
;
; CALLING SEQUENCE:
;       AIRTOVAC, WAVE
;
; INPUT/OUTPUT:
;       WAVE - Wavelength in Angstroms, scalar or vector
;               WAVE should be input as air wavelength(s), it will be
;               returned as vacuum wavelength(s).  WAVE is always converted to
;               double precision upon return.
;
; EXAMPLE:
;       If the air wavelength is  W = 6056.125 (a Krypton line), then 
;       AIRTOVAC, W yields an vacuum wavelength of W = 6057.8019
;
; METHOD:
;       See Morton (Ap. J. Suppl. 77, 119) for the formula used
;
; REVISION HISTORY
;       Written W. Landsman                November 1991
;       Converted to IDL V5.0   W. Landsman   September 1997
;-*/

  if (nparams == 0) {
      print "Syntax - AIRTOVAC, WAVE"
      print "WAVE (Input) is the air wavelength in Angstroms"
      print "On output WAVE contains the vacuum wavelength in Angstroms"
      break
  }
  
  if (wave >= 2000) {

    sigma2 = (1e4/double(wave) )^2.              //Convert to wavenumber squared

// Compute conversion factor

    fact = 1. + 6.4328e-5 + 2.94981e-2/(146.e0 - sigma2) + 2.5540e-4/( 41.e0 - sigma2)
    
    airtovac = wave*fact              //Convert Wavelength
  } else {
    airtovac = wave
  }
}

function planck,wave,temp {
/*;+
; NAME:
;       PLANCK()   
; PURPOSE: 
;       To calculate the Planck function in units of ergs/cm2/s/A  
;
; CALLING SEQUENCE: 
;       bbflux = PLANCK( wave, temp) 
;
; INPUT PARAMETERS: 
;       WAVE   Scalar or vector giving the wavelength(s) in **Angstroms**
;               at which the Planck function is to be evaluated.
;       TEMP   Scalar giving the temperature of the planck function in degree K
;
; OUTPUT PARAMETERS:
;       BBFLUX - Scalar or vector giving the blackbody flux (i.e. !pi*Intensity)
;               in erg/cm^2/s/A in at the specified wavelength points.
;
; EXAMPLES:
;       To calculate the blackbody flux at 30,000 K every 100 Angstroms between
;       2000A and 2900 A
;   
;       IDL> wave = 2000 + findgen(10)*100
;       IDL> bbflux = planck(wave,30000)
;
;       If a star with a blackbody spectrum has a radius R, and distance,d, then
;       the flux at Earth in erg/cm^2/s/A will be bbflux*R^2/d^2
; PROCEDURE:
;       The wavelength data are converted to cm, and the Planck function
;       is calculated for each wavelength point. See Allen (1973), Astrophysical
;       Quantities, section 44 for more information.
;
; NOTES:
;       See the procedure planck_radiance.pro in 
;       ftp://origin.ssec.wisc.edu/pub/paulv/idl/Radiance/planck_radiance.pro
;       for computation of Planck radiance given wavenumber in cm-1 or  
;       wavelength in microns 
; MODIFICATION HISTORY:
;       Adapted from the IUE RDAF               August, 1989
;       Converted to IDL V5.0   W. Landsman   September 1997
;       Improve precision of constants    W. Landsman  January 2002
;-*/
 if (nparams != 2) {
  print "Syntax - bbflux = planck( wave, temp)"
  break
 }

  bbflux = wave*0.

// Gives the blackbody flux (i.e. PI*Intensity) ergs/cm2/s/a

  w = wave / 1.E8                              // Angstroms to cm    
// constants appropriate to cgs units.
  c1 =  3.7417749e-5                // =2*!DPI*h*c*c       
  c2 =  1.4387687                   // =h*c/k
  val =  c2/w/temp  
//  mstr = machar(double = (size(val,/type) EQ 5) )  ;Get machine precision      
//  good = where( val LT alog(mstr.xmax), Ngood )    ;Avoid floating underflow

//  if ( Ngood GT 0 ) then  $
//      bbflux[ good ] =  C1 / ( w[good]^5 * ( exp( val[good])-1. ) )
  bbflux =  c1 / ( w^5 * ( exp(val)-1. ) )
  
  planck = bbflux*1.E-8              // Convert to ergs/cm2/s/A
}

function coordstring, ra, dec, rad {
/*
; create a nice string of celestial coordinates.
; ra and dec should be given in radians.
; if rad>0, convert to degrees
*/
  decl=dec
  ral=ral
  if (rad > 0) {
    decl = deg2rad(dec)
    ral = deg2rad(ra)
  }
  sign = decl < 0 ? "-" : "+"
  adec = abs(decl)
  rad = rad2deg(ral) / 15
  rah = int(rad)
  rad = (rad-rah) * 60
  ram = int(rad)
  rad = (rad-ram) * 60
  de = rad2deg(adec)
  deh = int(de)
  de = (de-deh) * 60
  dem = int(de)
  de = (de-dem) * 60

  coordstring = "RA = " + sprintf("%2.0fh ",rah) + sprintf("%2.0fm ", ram) + sprintf("%5.2fs", rad) + ", DEC = " + sign + sprintf("%2.0fd ", deh) + sprintf("%2.0f' ", dem) + sprintf("%4.1f\"", de)
}
