dpuserdir=getenv("DPUSER_DIR")
run dpuserdir+"/functions/lib_wcs.dpuser"

function indexreform, index, xsize, ysize, zsize {
//Return x,y,z co-ords from 1D index, given dimensions xsize, ysize, zsize
  indexreform=0
  if (xsize==0) {
    print "INDEXREFORM: Index Reform error! No x axis size"
    break
  }
  ndim=0
  xl=xsize
  if (ysize<=1) {
    ndim=1
    yl=1
    zl=1
  } else if (zsize<=1) {
      ndim=2
      yl=ysize
      zl=1
  } else {
      ndim=3
      yl=ysize
      zl=zsize
  }
  if ((index<1)||(index>(xl*yl*zl))) {
    print "INDEXREFORM: Index Reform error! Index out of range "+index+" ["+xl+":"+yl+":"+zl+"]"
    break
  }
  if (ndim>1) {
    iarray=longarray(3)
    z=0
    if (ndim==3) {
      iarray[3]=int(index/(xl*yl))+1
      xyl=index-(iarray[3]-1)*xl*yl
      iarray[2]=int(xyl/xl)+1
      iarray[1]=xyl-(iarray[2]-1)*xl
    } else if (ndim==2) {
        iarray[2]=int(index/xl)+1
        iarray[1]=index-(iarray[2]-1)*xl
    } else if (ndim==1) iarray[1]=index
  }
  indexreform=iarray
}
  
function lognan, inbuff {
//Make log of image with Nans and zeros
  outbuff=inbuff*0/0
  mask=where(inbuff>0)
  outbuff[mask]=log(inbuff[mask])
  lognan=outbuff
}

function clipnan, inbuff, low, high {
  outbuff=inbuff
  outbuff[where(inbuff<low)]=0/0
  if (high>low) outbuff[where(inbuff>high)]=0/0
  clipnan=outbuff
}

function axiscentroids, inbuff, axis {
//centroids for inbuff along single axis
//output is 1 demension less than inbuff
  ni=naxis(inbuff)
  if (ni==1) {
    print "AXISCENTROIDS: Axis=1 - Use xcen!"
    break
  }
  if (axis>naxis(inbuff)) {
    print "AXISCENTROIDS: Axis>max axes of input!"
    break
  } 
  if (ni==2) {
    if (axis==1) {
      outbuff=inbuff[*,1]*0
      for (i=1;i<=naxis1(inbuff);i++) {
        data=inbuff[i,*]
        data=data-avg(data)
        outbuff[i]=xcen(data)
      }
    }
    if (axis==2) {
      outbuff=inbuff[1,*]*0
      for (i=1;i<=naxis2(inbuff);i++) {
        data=inbuff[*,i]
        data=data-avg(data)
        outbuff[i]=xcen(data)
      }
    }
  }
  outbuff[where(outbuff==0)]=0/0
  axiscentroids=outbuff
}

function myhist, inbuff, low, high, bin, norm {
//Create histogram
//low, high - range of values
//bin - binsize
  hsize=round((high-low)/bin)
  outbuff=fits(hsize)
  for (i=1; i<=nelements(inbuff); i++) {
    hi=int((inbuff[i]-low)/bin)+1
    if ((hi>=1)&&(hi<=hsize)&&(inbuff[i]>low)) outbuff[hi]=outbuff[hi]+1
  }
  setwcs outbuff,1,1,low,1,bin,1
  if (norm==1) outbuff=norm(outbuff,/total)
  myhist=outbuff
}

function profile_export, inbuff, scale1, scale2, scale3, offset{
//Export 1D profiles with up to 3 separate scales, e.g. arcsec, pc, Re
//plus the pixel scale
//Offset ofsets by 1/2 a pixel (e.g. for log scale plot)
  if (nparams()<5) offset=1 //Do the offset by default
  if (nparams()<4) scale3=1
  if (nparams()<3) scale2=1
  if (nparams()<2) scale1=1
  outbuff=inbuff
  nx=nelements(inbuff)
  resize outbuff, 5, nx
  xscl=[0:nx-1]
  if (offset==1) xscl+=0.5
  outbuff[1,*]=inbuff
  outbuff[2,*]=xscl
  outbuff[3,*]=xscl*scale1
  outbuff[4,*]=xscl*scale2
  outbuff[5,*]=xscl*scale3
  profile_export=outbuff
}

  