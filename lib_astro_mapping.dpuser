//Mapping functions for excitation diagrams
//Requires lib_general

function map_compare_diagram, inbuff1, inbuff2, min1, max1, min2, max2, nbin, lgaxes {
//Map diagram density plot
//inbuff1, inbuff2 - value maps, x and y axes
//min,max - min and maximum values for axes
//nbin - no of bins on each axis
//lgaxes - 1=plot in log space (min,max must be in log values)

  n11=naxis1(inbuff1)
  n12=naxis1(inbuff2)
  n21=naxis2(inbuff1)
  n22=naxis2(inbuff2)
  if ((n11!=n12)||(n21!=n22)) {
    print "MAP_COMPARE_DIAGRAM: Error! Axes different!"
    map_compare_diagram=0
  } else {
    buffx=inbuff1
    buffy=inbuff2
    if (lgaxes==1) {
      buffx=lognan(buffx)
      buffy=lognan(buffy)
    }
    outbuff=longarray(nbin,nbin)
    cnt=0
    bad=0
    for (i=1;i<=n11;i++) {
      for (j=1;j<=n21;j++) {
        if (isnan(buffx[i,j])||isnan(buffy[i,j])) {
            bad++
        } else {
          cnt++
          bin1=(buffx[i,j]-min1)/(max1-min1)
          bin2=(buffy[i,j]-min2)/(max2-min2)
          if (bin1>0)&&(bin1<1)&&(bin2>0)&&(bin2<1) { //within range
            outbuff[round(bin1*nbin),round(bin2*nbin)]++ 
            print "MAP_COMPARE_DIAGRAM: Pixel="+cnt+" X="+i+" Y="+j+" E1="+buffx[i,j]+" E2="+buffy[i,j]+" Bin ["+bin1+","+bin2+"]"
          }       
//          print cnt+" "+tmpexp[cnt]
        }
      }
    }
    print "MAP_COMPARE_DIAGRAM: Nan pixels: "+bad+" Good pixels: "+(cnt-1)
    setfitskey outbuff,"CRPIX1",1
    setfitskey outbuff,"CRVAL1",min1
    setfitskey outbuff,"CDELT1",(max1-min1)/(nbin-1)
    setfitskey outbuff,"CRPIX2",1
    setfitskey outbuff,"CRVAL2",min2
    setfitskey outbuff,"CDELT2",(max2-min2)/(nbin-1)

    map_compare_diagram=outbuff
  }
}

function map_basis_distance, basex0, basey0,basex100,basey100, x1, x2, y1, y2, size {
  outbuff=fits(size, size)
  xl=x2-x1
  yl=y2-y1
  dd=sqrt((basex100-basex0)^2+(basey100-basey0)^2)
  for (i=1;i<=size;i++) {
    x=x1+(i-1)*xl/size
    for (j=1;j<=size;j++) {
      y=y1+(j-1)*yl/size
      outbuff[i,j]=sqrt((basex0-x)^2+(basey0-y)^2)/dd*100
    }
  }
  dx=xl/size
  dy=yl/size
  setfitskey outbuff,"CRPIX1",1
  setfitskey outbuff,"CRVAL1",x1
  setfitskey outbuff,"CDELT1",(x2-x1)/(size-1)
  setfitskey outbuff,"CRPIX2",1
  setfitskey outbuff,"CRVAL2",y1
  setfitskey outbuff,"CDELT2",(y2-y1)/(size-1)
  map_basis_distance=outbuff
}

function map_compare_basis, inbuff1, inbuff2, basex0, basey0, basex100,basey100,lgaxes {
//Map diagram density plot
//inbuff1, inbuff2 - value maps, x and y axes
//min,max - min and maximum values for axes
//nbin - no of bins on each axis
//lgaxes - 1=plot in log space (min,max must be in log values)

  n11=naxis1(inbuff1)
  n12=naxis1(inbuff2)
  n21=naxis2(inbuff1)
  n22=naxis2(inbuff2)
  if ((n11!=n12)||(n21!=n22)) {
    print "MAP_COMPARE_BASIS: Error! Axes different!"
    map_compare_basis=0
  } else {
    buffx=inbuff1
    buffy=inbuff2
    if (lgaxes==1) {
      buffx=lognan(buffx)
      buffy=lognan(buffy)
    }
    outbuff=inbuff1*0/0
    cnt=0
    bad=0
    dd=sqrt((basex100-basex0)^2+(basey100-basey0)^2)
    for (i=1;i<=n11;i++) {
      for (j=1;j<=n21;j++) {
        if (isnan(buffx[i,j])||isnan(buffy[i,j])) {
            bad++
        } else {
          cnt++
          outbuff[i,j]=sqrt((buffx[i,j]-basex0)^2+(buffy[i,j]-basey0)^2)/dd*100
//print "Pixel="+cnt+" X="+i+" Y="+j+" E1="+buffx[i,j]+" E2="+buffy[i,j]+" Distance :
//          print cnt+" "+tmpexp[cnt]
        }
      }
    }
    print "MAP_COMPARE_BASIS: Nan pixels: "+bad+" Good pixels: "+(cnt-1)

    map_compare_basis=outbuff
  }
}

function map_compare_pos, inbuff1, inbuff2, inbuff3, inbuff4, x, y {
//Get values of comparison data at x, y with box average
  e1=avg(inbuff1[x-1:x+1,y-1:y+1])/avg(inbuff2[x-1:x+1,y-1:y+1])
  e2=avg(inbuff3[x-1:x+1,y-1:y+1])/avg(inbuff4[x-1:x+1,y-1:y+1])
  print "MAP_COMPARE_POS: Compare 1: "+e1+" 2: "+e2
  map_compare_pos=[e1,e2]
}

    
function map_regime_ir, inbuff1, inbuff2, a1, a2, a3, b1, b2 {
//Map IR excitation diagram, using Riffel et al. (2013a) limits
  if (a1==0) {
    b1=log(2.6)
    b2=log(8.6)
    a1=log(0.4)
    a2=log(6)
    a3=log(2)
  }
  outbuff=inbuff1*0
  n1=naxis1(inbuff1)
  n2=naxis2(inbuff2)
  for (i=1;i<=n1;i++) {
    for (j=1; j<=n2; j++) {
      p1=inbuff1[i,j]
      p2=inbuff2[i,j]
      f=0
      if ((isnan(p1)==0)&&(isnan(p2)==0)) {
        if (p1<a2)&&(p2<b2) f=2//AGN
        if (p1<a1)&&(p2<b1) f=1 //PI
        if (p1>=a3)&&(p2>=b2) f=3 //LINER
        if (p1>=a2)&&(p2<b2) f=4 //TO1
        if (p1<a3)&&(p2>=b2) f=5 //TO2
//        if (i==33)&&(j==33) print i+","+j+","+p1+","+p2+","+f
      }
      outbuff[i,j]=f
    }
  }
  map_regime_ir=outbuff
}

function map_regime_optical, inbuff1, inbuff2, type {
//Map excitation diagram, using Kewley etal. 2006 limits
//inbuff2 is ALWAYS the [OIII]/H_beta ratio
  if (type==1) print "MAP_REGIME_OPTICAL : [N II]/H_alpha diagram"
  if (type==2) print "MAP_REGIME_OPTICAL : [S II]/H_alpha diagram"
  if (type==3) print "MAP_REGIME_OPTICAL : [O I]/H_alpha diagram"
  if ((type<1)||(type>3)) {
    print "MAP_REGIME_OPTICAL : Type error!"
    break
  }
  outbuff=inbuff1*0
  n1=naxis1(inbuff1)
  n2=naxis2(inbuff2)
  for (i=1;i<=n1;i++) {
    for (j=1; j<=n2; j++) {
      p1=inbuff1[i,j]
      p2=inbuff2[i,j]
      f=0
      if ((isnan(p1)==0)&&(isnan(p2)==0)) {
        if (type==1) { //[N II]/H_alpha
          if (p2<(0.61/(p1-0.05)+1.3)) f=1 //SF
          if ((p2>=(0.61/(p1-0.05)+1.3))&&(p2<(0.61/(p1-0.47)+1.19))) f=4 //Composite
          if (p2>=(0.61/(p1-0.47)+1.3)) f=2 //Seyfert
        }
        if (type==2) { //[S II]/H_alpha
          if (p2<(0.72/(p1-0.32)+1.3)) f=1 //SF
          if ((p2>=(0.72/(p1-0.32)+1.3))&&(p2>(1.89*p1+0.76))) f=2 //Seyfert
          if ((p2>=(0.72/(p1-0.32)+1.3))&&(p2<=(1.89*p1+0.76))) f=3 //LINER
        }
        if (type==2) { //[O I]/H_alpha
          if (p2<(0.73/(p1+0.59)+1.33)) f=1 //SF
          if ((p2>=(0.73/(p1+0.59)+1.33))&&(p2>(1.18*p1+1.13))) f=2 //Seyfert
          if ((p2>=(0.73/(p1+0.59)+1.33))&&(p2<=(1.18*p1+1.13))) f=3 //LINER
        }

//        print i+","+j+","+p1+","+p2+","+f
      }
      outbuff[i,j]=f
    }
  }
  map_regime_optical=outbuff
}
