//WCS functions
//Requires lib_header

function get_WCS_data, inbuff, axis {
  out=floatarray(3)
  ax=axis
  if (ax<=1)  ax=1 
  cv=getfitskey(inbuff, "CRVAL"+ax)
  cp=getfitskey(inbuff, "CRPIX"+ax)
  set_CD_key, inbuff, ax
  cd=getfitskey(inbuff,"CD"+axis+"_"+axis)
  out[1]=float(cp)
  out[2]=float(cv)
  out[3]=float(cd) 
  get_WCS_data=out
}

function get_WCS_values, inbuff {
//Gets "pseudo"-WCS values from linear dispersion values
  cv=inbuff[1]
  n=nelements(inbuff)
  cd=(inbuff[n]-inbuff[1])/(n-1)
  get_WCS_values=[1,cv,cd]
}

procedure set_CD_key, inbuff, axis {
  cdt="CD"+axis+"_"+axis
  chk=hdr_check_prefix(inbuff, cdt)
  if (chk==0) {
    cd=getfitskey(inbuff,"CDELT"+axis)
    setfitskey inbuff,"CD"+axis+"_"+axis,cd
  }
}

procedure set_WCS_data, inbuff, wcs, axis {
  if (axis<=1)  axis=1 
  setfitskey inbuff, "CRVAL"+axis, wcs[2]  
  setfitskey inbuff, "CRPIX"+axis, wcs[1]  
  setfitskey inbuff, "CDELT"+axis, wcs[3]
  setfitskey inbuff,"CD"+axis+"_"+axis, wcs[3]
}

function set_WCS_data, inbuff, wcs, axis {
  if (axis<=1)  axis=1 
  setfitskey inbuff, "CRVAL"+axis, wcs[2]  
  setfitskey inbuff, "CRPIX"+axis, wcs[1]  
  setfitskey inbuff, "CDELT"+axis, wcs[3]
  setfitskey inbuff,"CD"+axis+"_"+axis, wcs[3]
  set_WCS_data=inbuff
}

procedure copy_WCS_data, frombuff, tobuff, fromaxis, toaxis {
//Copy WCS values from one buffer to another
  if nparams()<3 fromaxis=1
  if nparams()<4 toaxis=fromaxis
  wcs=get_WCS_data(frombuff,fromaxis)
  set_WCS_data tobuff, wcs, toaxis
  view tobuff
}

function cvt_WCS_pixel, value, cpix, cval, cdelt, prnt {
  if nparams()<5 prnt=0
  p = ((value-cval)/cdelt+cpix)
  if (prnt>0) print p
  cvt_WCS_pixel = p
}

function cvt_pixel_WCS, pix, cpix, cval, cdelt, prnt {
  if nparams()<5 prnt=0
  if (prnt>0) {
    print "CP="+sprintf("%10.10f",cpix)
    print "CV="+sprintf("%10.10f",cval)
    print "CD="+sprintf("%10.10f",cdelt)
    print "PX="+sprintf("%10.10f",pix)
  }
  cvt_pixel_WCS = (pix-cpix)*cdelt+cval
}

function cvt_WCS_pixel_data, inbuff, value, axis {
  if nparams()<4 prnt=0
  wcs=get_WCS_data(inbuff,axis)
  cp=wcs[1]
  cv=wcs[2]
  cd=wcs[3]
  v=float(value)
  cvt_WCS_pixel_data = cvt_WCS_pixel(v, cp, cv, cd, prnt)
}

function cvt_pixel_WCS_data, inbuff, value, axis, prnt {
  if nparams()<4 prnt=0
  wcs=get_WCS_data(inbuff,axis)
  cp=wcs[1]
  cv=wcs[2]
  cd=wcs[3]
  v=float(value)
  cvt_pixel_WCS_data=cvt_pixel_WCS(v, cp, cv, cd)
}

function WCS_range, inbuff, p1, p2, axis, prnt {
  if nparams()<5 prnt=0
  l1 = cvt_pixel_WCS_data(inbuff, p1, axis)
  l2 = cvt_pixel_WCS_data(inbuff, p2, axis)
  if (prnt>0) print "WCS_RANGE: WCS Range ["+l1+"-"+l2+"]"
  WCS_range=[l1,l2]
}
  
function pixel_range, inbuff, w1, w2, axis, prnt {
  if nparams()<5 prnt=0
  p1 = cvt_WCS_pixel_data(inbuff, w1, axis)
  p2 = cvt_WCS_pixel_data(inbuff, w2, axis)
  if (prnt>0) print "WCS_RANGE: Pixel Range : ["+p1+"-"+p2+"]"
  pixel_range=[p1,p2]
}

function set_WCS_default, inbuff {
//Check WCS keys and set to 1 if not present
  wcskeys=["CRPIX1","CRVAL1","CDELT1","CRPIX2","CRVAL2","CDELT2","CRPIX3","CRVAL3","CDELT3","CD1_1","CD2_2","CD3_3"]
  n=naxis(inbuff)
  ne=n*3
  outbuff=inbuff
  for (i=1;i<=ne;i++) {
    t=strtrim(getfitskey(inbuff, wcskeys[i],/text))
    if (t=="") setfitskey outbuff,wcskeys[i],1, "Set by default"
  }
  set_WCS_default=outbuff
}

function get_aperture_WCS, inbuff, wcs1, wcs2, wsize, prnt {
//Get aperture from image based on WCS co-ords
//wcs1/wcs2/wcssize are in WCS units (e.g. if wcs1/wcs2=RA/DEC then wcssize is in degrees i.e sec/3600
  if nparams()<5 prnt=0
  if (prnt==1) print "GET_APERTURE_WCS: Parameters : "+wcs1+" "+wcs2+" "+wsize
  w1=wcs1-wsize
  w2=wcs1+wsize
  if (prnt==1) print "GET_APERTURE_WCS: Axis 1 : "+w1+"-"+w2
  wcsp1=pixel_range(inbuff, w1, w2, 1)
  w1=wcs2-wsize
  w2=wcs2+wsize
  if (prnt==1) print "GET_APERTURE_WCS: Axis 2 : "+w1+"-"+w2
  wcsp2=pixel_range(inbuff, w1, w2, 2)
  if (wcsp1[1]>wcsp1[2]) flip wcsp1, 1
  if (wcsp2[1]>wcsp2[2]) flip wcsp2, 1
  get_aperture_WCS=inbuff[wcsp1[1]:wcsp1[2], wcsp2[1]:wcsp2[2]]
}

function get_wcs_cd, inbuff, key {
  t1=getfitskey(inbuff,key,/text)
  if (t1=="") {
    get_wcs_cd = 0
  } else {
    get_wcs_cd = getfitskey(inbuff,key)
  }
}

function WCS_cd_cdelt, inbuff, prnt {
  if nparams()<2 prnt=0
  cd11=get_wcs_cd(inbuff,"CD1_1")
  cd12=get_wcs_cd(inbuff,"CD1_2")
  cd21=get_wcs_cd(inbuff,"CD2_1")
  cd22=get_wcs_cd(inbuff,"CD2_2")
  print cd11+","+cd12+","+cd21+","+cd22
  cd1=sqrt(cd11^2+cd21^2)
  cd2=sqrt(cd12^2+cd22^2)
  scd=sign(cd11*cd22-cd12*cd21)
  r1=atan(sign(cd1*cd2)*cd12,cd22,/deg)
  r2=atan(-1*sign(cd1*cd2)*cd21,cd11,/deg)
  if (scd<0) {
    cd1=-1*cd1
  }
  if (prnt>0) {
    print "Rotation 1 : "+r1
    print "Rotation 2 : "+r2
    print "CDELT1 : "+cd1+" ("+cd1*3600+")"
    print "CDELT2 : "+cd2+" ("+cd2*3600+")"
  }

  WCS_cd_cdelt=[cd1,cd2,r1]
}

function WCS_cdelt_cd, cdelt1, cdelt2, rotang {
//Convert CDELT/Rotangle values to CD..
  cd11=cdelt1*cos(rotang,/degrees)
  cd12=abs(cdelt2)*sign(cdelt1)*sin(rotang,/degrees)
  cd21=-abs(cdelt1)*sign(cdelt2)*sin(rotang,/degrees)
  cd22=cdelt2*cos(rotang,/degrees)
  WCS_cdelt_cd=[cd11,cd12,cd21,cd22]
}

procedure set_cd_keys, data, cdkeys {
//Set CD keys and delete CDELT ones
  setfitskey data,"CD1_1",cdkeys[1]
  setfitskey data,"CD1_2",cdkeys[2]
  setfitskey data,"CD2_1",cdkeys[3]
  setfitskey data,"CD2_2",cdkeys[4]
  deletefitskey data,"CDELT1"
  deletefitskey data,"CDELT2"
}

function WCS_clean_cd, data {
//Clean up CD keys and remopve extraneous
  delkeys=["CD3_1","CD3_2","CD1_3","CD2_3","CDELT1","CDELT2","PC1_1","PC2_1","PC1_2","PC2_2","PC2_3","PC3_1","PC3_2","PC3_3","CROTA2"]
  outbuff=data
  if (hdr_check_prefix(outbuff, "CD3_3")>=1) setfitskey outbuff,"CDELT3",getfitskey(outbuff,"CD3_3")
  if (hdr_check_prefix(outbuff, "CD1_1")>=1) {
    for (i=1;i<=nelements(delkeys);i++) {
      if (hdr_check_prefix(outbuff, delkeys[i])>=1) {
        deletefitskey outbuff, delkeys[i]
      }
    }
  }
  WCS_clean_cd=outbuff
}

function get_WCS_image, cube {
//Get all WCS data for cube (image) and calculate CDELT and rotation angle from CD keys
  crpix1=getfitskey(cube,"CRPIX1")
  crpix2=getfitskey(cube,"CRPIX2")
  crval1=getfitskey(cube,"CRVAL1")
  crval2=getfitskey(cube,"CRVAL2")
  cd12=getfitskey(cube, "CD1_2")
  cd22=getfitskey(cube, "CD2_2")
  cd11=getfitskey(cube, "CD1_1")
  cd21=getfitskey(cube, "CD2_1")
  cdelt1=sqrt(cd11^2+cd21^2)
  cdelt2=sqrt(cd12^2+cd22^2)
  dsign=sign(cd11*cd22-cd12*cd21)
  rotang=atan(sign(cdelt1*cdelt2)*cd12, cd22, /deg)
  cdelt1=dsign*cdelt1
  get_WCS_image=[crpix1,crval1,cd11,cd12,crpix2,crval2,cd21,cd22,cdelt1,cdelt2,rotang]
}

function WCS_cd_from_cdelt, data, cdelt1, cdelt2, crota2 {
  outbuff=data
  cr=cos(crota2,/deg)
  sr=sin(crota2,/deg)
  cd11=cdelt1*cr
  cd12=abs(cdelt2)*sign(cdelt1)*sr
  cd21=-abs(cdelt1)*sign(cdelt2)*sr
  cd22=cdelt2*cr
  setfitskey outbuff,"CD1_1",cd11
  setfitskey outbuff,"CD1_2",cd12
  setfitskey outbuff,"CD2_1",cd21
  setfitskey outbuff,"CD2_2",cd22
  deletefitskey outbuff,"CDELT1"
  deletefitskey outbuff,"CDELT2"
  deletefitskey outbuff,"CROTA2"
  WCS_cd_from_cdelt=outbuff
}

function set_WCS_image_scale, cube, wcs, xscale, yscale{
//Rescales and sets WCS image data for cubes/images, including cd keys
//Removes cdelt and crota keywords}
  outbuff=cube
  crpix1=wcs[1]
  crval1=wcs[2]
  cd11=wcs[3]
  cd12=wcs[4]
  crpix2=wcs[5]
  crval2=wcs[6]
  cd21=wcs[7]
  cd22=wcs[8]
  cdelt1=wcs[9]
  cdelt2=wcs[10]
  rotang=wcs[11]
//Reset CD values
  setfitskey outbuff, "CRPIX1", crpix1*xscale-(xscale/2-0.5)
  setfitskey outbuff, "CRPIX2", crpix2*yscale-(yscale/2-0.5)
  setfitskey outbuff, "CRVAL1", crval1
  setfitskey outbuff, "CRVAL2", crval2
  setfitskey outbuff, "CD1_1", cd11/xscale
  setfitskey outbuff, "CD1_2", cd12/xscale
  setfitskey outbuff, "CD2_1", cd21/yscale
  setfitskey outbuff, "CD2_2", cd22/yscale
//Delete keys
  if (hdr_check_prefix(outbuff, "CDELT1")>=1) deletefitskey outbuff, "CDELT1"
  if (hdr_check_prefix(outbuff, "CDELT2")>=1) deletefitskey outbuff, "CDELT2"
  if (hdr_check_prefix(outbuff, "CROTA2")>=1) deletefitskey outbuff, "CROTA2"
  set_WCS_image_scale=outbuff
}

function WCS_scale, inbuff, scl, axis {
//Rescale WCS DELT and VAL
//scl is rescale value, e.g. A->um = 1e-4, A->nm = 0.1
  outbuff=inbuff
  swcs=get_WCS_data(inbuff, axis)
  swcs[2]*=scl
  swcs[3]*=scl
  set_WCS_data outbuff, swcs, axis
  WCS_scale=outbuff
}

function WCS_shift_pix, inbuff, xshift, yshift, sec {
//Shift image by altering the CRPIX1,2 values to re-align between images
//Parameters - xshift, yshift - amount to shift in axis 1 and 2 resp.
// - sec, (default 0), if =0, shifts in pixels, else in seconds of arc
  outbuff=inbuff
//Check if using CDELT or CD keys
  if (nparams()<3) sec=0
  if (sec==0) {//Using pixel shift
    pix1=xshift
    pix2=yshift
  } else {//Using seconds of arc shift
    if (hdr_check_prefix(outbuff,"CDELT1")==0) {//Using CD keys
      cdelts=WCS_cd_cdelt(outbuff)//Compute CDELT keys
      cdelt1=cdelts[1]
      cdelt2=cdelts[2]
    } else {//Using CDELT keys
      cdelt1=getfitskey(outbuff,"CDELT1")
      cdelt2=getfitskey(outbuff,"CDELT2")
    }
//    print "CDELT1="+cdelt1+ " CDELT2="+cdelt2
    pix1=xshift/cdelt1/3600
    pix2=yshift/cdelt2/3600
  }
//  print "PIX1="+pix1+" PIX2="+pix2
  setfitskey outbuff, "CRPIX1", getfitskey(outbuff, "CRPIX1")-pix1
  setfitskey outbuff, "CRPIX2", getfitskey(outbuff, "CRPIX2")-pix2
  WCS_shift_pix=outbuff
}

function WCS_PC_To_CD, inbuff {
//Convert PC/CDELT to CD matrix
  if (hdr_check_prefix(inbuff,"PC1")!=0)&& (hdr_check_prefix(inbuff,"CDELT1")!=0){ //Have PC/CDELT matrix
    outbuff=inbuff
    pc11=hdr_get_fits_key(inbuff,"PC1_1") //Allow for wavelength in axis1 or axis3
    pc12=hdr_get_fits_key(inbuff,"PC1_2")
    pc21=hdr_get_fits_key(inbuff,"PC2_1")
    pc22=hdr_get_fits_key(inbuff,"PC2_2")
    pc32=hdr_get_fits_key(inbuff,"PC3_2")
    pc23=hdr_get_fits_key(inbuff,"PC2_3")
    pc33=hdr_get_fits_key(inbuff,"PC3_3")
    cdelt1=hdr_get_fits_key(inbuff,"CDELT1")
    cdelt2=hdr_get_fits_key(inbuff,"CDELT2")
    cdelt3=hdr_get_fits_key(inbuff,"CDELT3")
    if (pc11!="") {
      cd11=float(pc11)*float(cdelt1)
      setfitskey outbuff, "CD1_1", cd11
      deletefitskey outbuff, "PC1_1"
    }
    if (pc21!="") {
      cd21=float(pc21)*float(cdelt2)
      setfitskey outbuff, "CD2_1", cd21
      deletefitskey outbuff, "PC2_1"
    }
    if (pc12!="") {
      cd12=float(pc12)*float(cdelt1)
      setfitskey outbuff, "CD1_2", cd12
      deletefitskey outbuff, "PC1_2"
    }
    if (pc22!="") {
      cd22=float(pc22)*float(cdelt2)
      setfitskey outbuff, "CD2_2", cd22
      deletefitskey outbuff, "PC2_2"
    }
    if (pc23!="") {
      cd32=float(pc32)*float(cdelt3)
      setfitskey outbuff, "CD3_2", cd32
      deletefitskey outbuff, "PC3_2"
    }
    if (pc23!="") {
      cd23=float(pc23)*float(cdelt2)
      setfitskey outbuff, "CD2_3", cd23
      deletefitskey outbuff, "PC2_3"
    }
    if (pc33!="") {
      cd33=float(pc33)*float(cdelt3)
      setfitskey outbuff, "CD3_3", cd33
      deletefitskey outbuff, "PC3_3"
    }
    WCS_PC_To_CD=outbuff
    
  } else {
    print "WCS_PC_To_CD: No PC/CDELT matrix!"
    WCS_PC_To_CD=0
  }

}
