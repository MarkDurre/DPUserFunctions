//Define standards for pPXF stellar kinematic wavelength range for data cube and templates
procedure pPXF_trimtemplates, lval, ldelt, npix, scale, dbase, indir, outdir {
  pPXF_lval=lval*scale
  pPXF_ldelt=ldelt*scale
  pPXF_npix=npix
  pPXF_dirbase=dbase

//Prepare templates for input pPXF
  in_dir=indir
  out_dir=outdir
  title="Re-disperse Spectral Templates"
//Get file list
  cd pPXF_dirbase+in_dir
  print title+" for : "+pwd()
  file_list=findfile("*.fits")
  nfiles=nelements(file_list)
  print ""

  print "PPXF_TRIMTEMPLATES: Number of files : "+nfiles
//Set up new dispersion
  xnew=make_disp(pPXF_lval,pPXF_ldelt,1,pPXF_npix)
  for (m=1; m<=nfiles; m++) {
    fn=file_list[m]
    print "Processing template : " + m + " - "+fn
    inbuff=readfits(fn)
//Get old dispersion
    wcs=get_WCS_data(inbuff,1)
    cval_old=wcs[2]*scale
    cdelt_old=wcs[3]*scale
    cpix_old=wcs[1]
    n1=naxis1(inbuff)
    xold=make_disp(cval_old,cdelt_old,cpix_old,n1)
//Interpolate to new dispersion
    outbuff=interpol(inbuff,xold,xnew)
//Set WCS on new spectrum
    set_WCS_data outbuff,[1,pPXF_lval,pPXF_ldelt],1 
    writefits pPXF_dirbase+out_dir+fn,outbuff
  }
  print "PPXF_TRIMTEMPLATES: Completed!"
}

procedure pPXF_trimtempl {
  lval=22810
  uval=23590
  pPXF_dirbase="/Users/mdurre/dropbox/NGC5728/stellarkinematics/"

//Prepare templates for input pPXF
  in_dir="templates_r/"
  out_dir="templtrimmed_r/"
  title="Trim Spectral Templates"
//Get file list
  cd pPXF_dirbase+in_dir
  print title+" for : "+pwd()
  file_list=findfile("*.fits")
  nfiles=nelements(file_list)
  print ""
  print "PPXF_TRIMTEMPL: Number of files : "+nfiles
//Set up new dispersion
  for (m=1; m<=nfiles; m++) {
    fn=file_list[m]
    print "Processing file : " + m + " - "+fn
    inbuff=readfits(fn)
//Get old dispersion
    p1=cvt_WCS_pixel_data(inbuff,lval,1)
    p2=cvt_WCS_pixel_data(inbuff,uval,1)
    writefits pPXF_dirbase+out_dir+fn,inbuff[p1:p2]
  }
  print "Completed!"
}

procedure pPXF_sizetemplates, pmin {
  pPXF_dirbase="/Users/mdurre/dropbox/NGC5728/stellarkinematics/"

//Prepare templates for input pPXF
  in_dir="templates_r/"
  out_dir="templtrimmed_r/"
  title="Trim Spectral Templates"
//Get file list
  cd pPXF_dirbase+in_dir
  print title+" for : "+pwd()
  file_list=findfile("*.fits")
  nfiles=nelements(file_list)
  print ""
  print "PPXF_SIZETEMPLATES: Number of files : "+nfiles
  nz=10000
  for (m=1; m<=nfiles; m++) {
    fn=file_list[m]
//    print "Processing file : " + m + " - "+fn
    inbuff=readfits(fn)
    nz=min(nz,naxis1(inbuff))
  }
  print "PPXF_SIZETEMPLATES: Minimum length : "+nz
  for (m=1; m<=nfiles; m++) {
    fn=file_list[m]
//    print "Processing file : " + m + " - "+fn
    inbuff=readfits(fn)
    outbuff=inbuff[pmin:nz]
    writefits pPXF_dirbase+out_dir+fn,outbuff
  }
  print "PPXF_SIZETEMPLATES: Completed!"
}
 
function pPXF_data_prepare, data,  template, redshift, scale, nrm, prnt {
//Prepare K-band data cube for input to pPXF 
  outbuff=data*0/0
  nw=naxis(data)
  scl=scale
  if (scale==0) scl=1
  inbuff=data
  wcs=get_WCS_data(data,nw)
  wcs[2]=wcs[2]/(1+redshift)
  wcs[3]=wcs[3]/(1+redshift)
  set_WCS_data inbuff, wcs, nw
  set_CD_key template, 1
  xnew=spectrum_make_disp_data(template, 1) 
  xold=spectrum_make_disp_data(inbuff, nw)*scl //Can re-scale wavelength units
  nnew=naxis1(xnew)
//Create output cube
  if (nw==1) resize outbuff, nnew, 1
  if (nw==2) resize outbuff, naxis1(outbuff), nnew
  if (nw==3) resize outbuff, naxis1(outbuff), naxis2(outbuff), nnew
//Redshift data
//Normalise and interpolate each pixel
  if (nw==3) for (i=1;i<=naxis1(data);i++) {
    if (prnt==1) print "PPXF_DATA_PREPARE: Col : "+i
    for (j=1;j<=naxis2(data);j++) {
      yold=cblank(inbuff[i,j,*])
      ynew=interpol(yold,xold,xnew)
      if (nrm==1) ynew=spectrum_deslope(ynew/median(ynew,0), 0, 0)
      outbuff[i,j,*]=ynew
    }
  }
  if (nw==2) for (i=1;i<=naxis2(data);i++) {
    yold=cblank(inbuff[*,i])
    ynew=interpol(yold,xold,xnew)
    if (nrm==1) ynew=spectrum_deslope(ynew/median(ynew,0), 0, 0)
    outbuff[*,i]=ynew
  }
  if (nw==1) {
    yold=cblank(inbuff)
    ynew=interpol(yold,xold,xnew)
    if (nrm==1) ynew=spectrum_deslope(ynew/median(ynew,0), 0, 0)
    outbuff=ynew
  }
//Set WCS on new cube
  newwcs=get_WCS_data(template,1)
  set_WCS_data outbuff,newwcs, nw
  pPXF_data_prepare=outbuff    
}

function pPXF_cube_norm, cube {
//
  n1=naxis1(cube)
  n2=naxis2(cube)
  n3=naxis3(cube)
  outbuff=cube
  for (i=1;i<=n1;i++) {
    for (j=1;j<=n2;j++) {
      spaxel=cube[i,j,*]
      spaxel=norm(spaxel,/average)
      outbuff[i,j,*]=spaxel
    }
  }
  pPXF_cube_norm=outbuff
}
  
function pPXF_results_cube, dirbase, resultsfn, cube_template, wcs1 {
//Create cube from pPXF results file
//dirbase : data directory
//resultsfn : results file name, either solution, weights or fit
//cube_template : template for sizing, usually the original data cube
//ecs1 : flag =0 - set z axis to spectrum of template, =0 - set z axis to linear (1,2,3..)
//  pPXF_dirbase="/Users/mdurre/dropbox/NGC4438/Velmaps/pPXF/Data/"
  resdata=import(dirbase+"/"+resultsfn)
  zlen=naxis1(resdata)-2
  res=io_cube_from_xyz(cube_template, resdata, zlen)
  if (wcs1==1) {
    set_WCS_data, res, [1,1,1],3
  } else {
    wcs=get_WCS_data(cube_template, 3)
    set_WCS_data, res, wcs, 3
  } 
  wcs2=get_WCS_data(res, 3)
  cp=wcs2[1]
  cv=wcs2[2]
  cd=wcs2[3] 
  print "PPXF_RESULTS_CUBE: Z axis start : "+cvt_pixel_WCS(1, cp, cv, cd)+" End: "+cvt_pixel_WCS(zlen, cp, cv, cd)+" Delta: "+cd
  pPXF_results_cube=res
}
  
function pPXF_results_specarray, dirbase, resultsfn, specarray_template, wcs1 {
//Create cube from pPXF results file
//dirbase : data directory
//resultsfn : results file name, either solution, weights or fit
//cube_template : template for sizing, usually the original data cube
//wcs1 : flag =0 - set z axis to spectrum of template, =0 - set z axis to linear (1,2,3..)
//pPXF_dirbase="/Users/mdurre/dropbox/NGC4438/Velmaps/pPXF/Data/"
  resdata=import(dirbase+resultsfn)
  xlen=naxis1(resdata)-1
  res=io_array_from_xyz(specarray_template, resdata, xlen)
  if (wcs1==1) {
    set_WCS_data, res, [1,1,1],3
  } else {
    wcs=get_WCS_data(specarray_template, 3)
    set_WCS_data, res, wcs, 3
  } 
  wcs2=get_WCS_data(res, 3)
  cp=wcs2[1]
  cv=wcs2[2]
  cd=wcs2[3] 
  print "PPXF_RESULTS_SPECARRAY: X axis start : "+cvt_pixel_WCS(1, cp, cv, cd)+" End: "+cvt_pixel_WCS(xlen, cp, cv, cd)+" Delta: "+cd
  pPXF_results_specarray=res
}

function pPXF_goodpixels, gp, lam, spec {
  gparray=fits(nelements(lam),3)
  for (i=1;i<=nelements(gp);i++) gparray[gp[i],1]=1
  for (i=1;i<=nelements(lam);i++) {
    gparray[i,2]=lam[i]
    gparray[i,3]=spec[i]
  }
  pPXF_goodpixels=gparray
}


