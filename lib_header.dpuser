//FITS header functions

function hdr_check_prefix, inbuff, key {
//Check inbuff for presence of prefix at the start of each line
//Returns 0 if not found, line number if found
  h=header(inbuff)
  nlines=int(nelements(h)/80) //Headers are 80 chars long
  lkey=strlen(strtrim(key))
  UK=upper(key)
  chk=0
  i=1
  while (i<=(nlines-1))&&(chk==0) {
    hline=h[(i-1)*80+1:i*80]
    HKEY=upper(hline[1:lkey])
    if (UK==HKEY) then chk=i
    i++
  }
  hdr_check_prefix=chk
}

function hdr_get_lines, inbuff {
  h=header(inbuff)
  nlines=int(nelements(h)/80)
  hh=stringarray(nlines)
  for (i=1;i<=nlines;i++) hh[i]=h[(i-1)*80+1:i*80]
  hdr_get_lines=hh
}

function hdr_get_fits_key, inbuff, key {
//Gets fits key, with check if it exists first, if not, returns blank
//Required since QFitsView now returns an error if not found
  k=""
  if (hdr_check_prefix(inbuff,key)>=1) k = getfitskey(inbuff,key)
  hdr_get_fits_key = k
}

function hdr_get_all_fits_keys, inbuff, prefix {
//Get all keys in header that match a prefix
//This will only select keys in the form KEY = VALUE
  if (nparams()<2) prefix=""
  hh=hdr_get_lines(inbuff)
  nlines=nelements(hh)
  outbuff=stringarray(nlines)
  cnt=0
  l=strlen(prefix)
  for (i=1;i<=nlines;i++) {
    p=strpos(hh[i],"=")
    if (p>0) {
      if (prefix=="") {
        cnt++
        outbuff[cnt]=strtrim(hh[i][1:p-1])
      } else {
        if (hh[i][1:l]==prefix) {
          cnt++
          outbuff[cnt]=strtrim(hh[i][1:p-1])        
        }
      }
    }
  }
  hdr_get_all_fits_keys=outbuff[1:cnt]
}

function hdr_get_all_fits_key_values, inbuff, prefix, type {
//Get all key values that match a prefix
//If type=1, return number array, otherwise string
//If prefix not given, prefix=""
//If type=1, string keys are returned as nan, i.e. 0/0
  if (nparams()<3) type=0
  if (nparams()<2) prefix=""
  keys=hdr_get_all_fits_keys(inbuff, prefix)
  nkeys=nelements(keys)
  if (type==0) {
    outbuff=stringarray(nkeys)
  } else {
    outbuff=floatarray(nkeys)
  }
  for (i=1;i<=nkeys;i++) {
    key=getfitskey(inbuff, keys[i])
    if (type==0) {
      outbuff[i]=string(key)
    } else {
      if (string(key)==string(float(key))){
        outbuff[i]=key //Test for non-string keys
      } else {
        outbuff[i]=0/0
      }
    }
  }
  hdr_get_all_fits_key_values=outbuff
}
/*
    txt=txtdata[i]
      key=simplifywhitespace(txt[2:9]) //FITS key
      line=txt[12:80]
          sline=strsplit(line,"/") //Split value and comment
          value=strtrim(sline[1])
          cmnt=strtrim(sline[2])
          len=strlen(value)
          if strpos(value,"'")>-1 { //Value is string
            p1=strpos(value,"'")
            p2=strpos(value[p1+1:len],"'")
            val=value[p1+1:p2-1]
          } else { //Value is float or int
            if strpos(value,".")>-1 {//Value is float
              val=float(value)
            } else {
              val=int(value)
            }
          }
          setfitskey hdrbuff,key,val,cmnt
*/

function hdr_read_from_text, txtdata, prefix {
//Read header keys from text data (stringarray) and add to FITS file
//Default prefix for header keys is "#"
//Typically the header fits file will use copyheader to xfer to data fits file
  if nparams()<3 prefix="#"
  nlines=nelements(txtdata)
  hdrbuff=fits(1) //Create a basic fits file to put keys in
  for (i=1;i<=nlines;i++) {
    txt=txtdata[i]
    ltxt=strlen(txt)
    print txt
    if (txt[1]==prefix)&&(txt[2]!=" ") { //Part of the header
      key=simplifywhitespace(txt[2:9]) //FITS key
      if (key=="SIMPLE")||(key=="END") { //Ignore the first/last lines, this is created with the new FITS file
      } else {
        if (key=="HISTORY")||(key=="COMMENT") { //Write HISTORY keys - no "=" sign
          if (key=="HISTORY") setfitskey hdrbuff,"HISTORY",txt[10:80]
          if (key=="COMMENT") setfitskey hdrbuff,"COMMENT",txt[10:80]
        } else {
          p=strpos(txt,"=")
          line=txt[p+2:ltxt] //Should have "=" sign
          sline=strsplit(line,"/") //Split value and comment
          value=strtrim(sline[1])
          cmnt=strtrim(sline[2])
          len=strlen(value)
          if strpos(value,"'")>-1 { //Value is string
            p1=strpos(value,"'")
            p2=strpos(value[p1+1:len],"'")
            val=value[p1+1:p2]
          } else { 
            if strpos(value,".")>-1 {//Value is float
              val=float(value)
            } else { //Integer
              val=int(value)
            }           
          }
//          print i,key,value,cmnt,val
          setfitskey hdrbuff,key,val,cmnt
        }
      }
    }
  }
  
  hdr_read_from_text = hdrbuff
}

