//Astronomical function - black-body, redshift, extinction
//Requires lib_wcs, lib_spectrum, lib_masking

function redshift_data, inbuff, z, rdflag, nanflag, smth, fcons {
//Redshift data, always assume that last axis in spectral one
//rdflag=1, redisperse final spectrum to original wavelength range
//z -ve to shift data to higher redshifts, z +ve to shift to rest-frame
//nanflag=1, preserve nans at original data
//smth>0, smooth by no. pixels
//fcons=1, conserve flux,i.e. total values conserved
  if (nparams()==0) {
    print "REDSHIFT_DATA : Paramaters data, z, rdflag, nanflag, smooth, fcons"
    redshift_data=0
    break
  }
  if (nparams()<6) fcons=1 //Flux conserve flag
  if (nparams()<5) smth=0
  if (nparams()<4) nanflag=0
  if (nparams()<3) rdflag=0
  saxis=naxis(inbuff)
  zshift=z+1
  if (z<0) zshift=1/(abs(z)+1)
  wcsold=get_WCS_data(inbuff,saxis)
  wcsnew=wcsold
  wcsnew[2]=wcsold[2]*zshift
  wcsnew[3]=wcsold[3]*zshift
  outbuff=cblank(inbuff)
  nans=outbuff*0
  nans[where(outbuff==0)]=1
  newnans=nans
  set_WCS_data outbuff, wcsnew, saxis
  set_WCS_data nans, wcsnew, saxis
  if (smth>0) outbuff=smooth(outbuff,smth)
  if (rdflag==1) {
    oldspec=spectrum_make_disp_data(inbuff,saxis)
    newspec=spectrum_make_disp_data(outbuff,saxis)
    newbuff=outbuff
    newnans=outbuff
    if (saxis==1) {
      newbuff=interpol(outbuff,newspec,oldspec)
      newnans=interpol(nans, newspec, oldspec)
    } else {
      for (i=1;i<=naxis1(inbuff);i++) {
        for (j=1;j<=naxis2(inbuff);j++) {
          newbuff[i,j,*]=interpol(outbuff[i,j,*],newspec,oldspec)
          newnans[i,j,*]=interpol(nans[i,j,*],newspec,oldspec)
        }
      }
    }
    clip newnans,0,1
    n=newnans
    n[where(newnans>0.05)]=1
    n[where(newnans<=0.05)]=0 
    newnans=n  
    outbuff=newbuff
    set_WCS_data outbuff, wcsold, saxis
  }
  if (nanflag==1) outbuff[where(newnans>0.05)]=0/0
  if (fcons==1) {
    if (z>0) outbuff=outbuff/(1+abs(z))
    if (z<0) outbuff=outbuff*(1+abs(z))
  }
  redshift_data=outbuff
}

procedure rs, inbuff, z {
  inbuff=redshift_data(inbuff, -z)
}

function bb, t, l {
//Black-body value for temperature and wavelength (m)
    h=6.62618e-34 //Plank's constant
    cl=2.998e8 //Speed of light
    k=1.3807e-23 //Boltzmann's constant
    k1=2*h*cl*cl
    k2=h*cl/k
//    print k1
//    print k2
    x1=k1/(l^5)
    x2=(exp(k2/l/t)-1)
//    print x1
//    print x2
    bb=x1/x2
}

function bb_make_log, t, l1, l2, npix, scale, cutoff {
//Make bb with wavelength in log range
//l1, l2 are log wavelength in meters
  
  if (nparams()==0) {
    print "BB_MAKE_LOG : Paramaters temp, wl1, wl2, npix, scale, cutoff"
    bb_make_log=0
    break
  }
  dl=abs(l1-l2)/(npix+1)
  bbb=longarray(npix,2)
  l=l1-dl
  for (i=1;i<=npix;i++) {
    l=l+dl
    ll=10^l
    bbb[i,1]=ll*scale
    b=bb(t,ll)
    if (b<=cutoff){ 
    	b=0/0 
    }
    bbb[i,2]=b
  }
  bb_make_log=bbb
}
  
function bb_make,t, l1, l2, npix, flag {
// Make black body
//t=temperature
//l1,l2=wavelength range 
//flag 0=Angstroms, 1=nm, 2=um
//npix=number of pixels
//Convert wavelengths to m
    if (nparams()==0) {
      print "BB_MAKE: Parameters t, l1, l2, npix, flag"
      bb_make=0
      break
    }
    if (nparams()<5) flag=1
    if (flag==0) { 
      fl=1e-10
      wl=" A"
    } else if (flag==1) {
      fl=1e-9
      wl = " nm"
    } else if (flag==2) {
      fl=1e-6
      wl = " um"
    }
    //Convert wavelength to meters
    lamb1=l1*fl
    lamb2=l2*fl
    dl=abs(l1-l2)/(npix-1)
    print "BB_MAKE: L1 :"+l1+" L2 : "+l2+" DL : "+dl + wl
    dlamb=dl*fl
    bbb=fits(npix)
    lamb=lamb1-dlamb
    for (i=1;i<=npix;i++) {
      lamb=lamb+dlamb
      b=bb(t,lamb)
      bbb[i]=b
    }
    setwcs bbb,1,1,l1,1,dl,1
    bb_make=bbb
}

function bb_div, inbuff, temp, scale {
//Divide spectrum by blackbody
  if nparams()<3 scale=1  //Assume nm
  if (nparams()==0) {
    print "BB_DIV : Param1 = spectrum"
    print "BB_DIV : Param2 = temperature (deg K)"
    print "BB_DIV : Param3 = wavelength scale (0=Ang., 1=nm, 2=um, default 1)"
    bb_div = 0
  } else {
    n=naxis1(inbuff)
    l1=cvt_pixel_WCS_data(inbuff,1,1)
    l2=cvt_pixel_WCS_data(inbuff,n,1)
    bb=bb_make(temp,l1,l2,n,scale)
    outbuff=inbuff/bb
    bb_div=outbuff
  }
}

